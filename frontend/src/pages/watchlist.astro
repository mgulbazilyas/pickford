---
import Layout from '../layouts/Layout.astro';
---

<Layout title="My Watchlist">
  <div class="max-w-6xl mx-auto mt-8 px-4">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold">My Watchlist</h1>
      <button id="addMovieBtn" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
        Add Movie
      </button>
    </div>

    <div id="watchlist" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Watchlist items will be populated here -->
    </div>

    <div id="emptyState" class="text-center py-12 hidden">
      <div class="text-gray-400 text-6xl mb-4">üé¨</div>
      <h3 class="text-xl font-semibold text-gray-600 mb-2">Your watchlist is empty</h3>
      <p class="text-gray-500 mb-4">Start adding movies you want to watch!</p>
      <button data-show-add-movie-modal class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors">
        Browse Movies
      </button>
    </div>
  </div>

  <!-- Add Movie Modal -->
  <div id="addMovieModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-semibold mb-4">Add Movie to Watchlist</h3>
      <form id="addMovieForm" class="space-y-4">
        <div>
          <label for="movieId" class="block text-sm font-medium text-gray-700 mb-1">
            Movie ID
          </label>
          <input
            type="text"
            id="movieId"
            name="movieId"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter movie ID"
          />
        </div>

        <div>
          <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">
            Notes (optional)
          </label>
          <textarea
            id="notes"
            name="notes"
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Why do you want to watch this movie?"
          ></textarea>
        </div>

        <div>
          <label for="priority" class="block text-sm font-medium text-gray-700 mb-1">
            Priority
          </label>
          <select
            id="priority"
            name="priority"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="low">Low</option>
            <option value="medium" selected>Medium</option>
            <option value="high">High</option>
          </select>
        </div>

        <div class="flex gap-3">
          <button
            type="submit"
            class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
          >
            Add to Watchlist
          </button>
          <button
            type="button"
            data-hide-add-movie-modal
            class="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Modal -->
  <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-semibold mb-4">Edit Watchlist Item</h3>
      <form id="editForm" class="space-y-4">
        <input type="hidden" id="editMovieId" name="movieId">

        <div>
          <label for="editNotes" class="block text-sm font-medium text-gray-700 mb-1">
            Notes
          </label>
          <textarea
            id="editNotes"
            name="notes"
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          ></textarea>
        </div>

        <div>
          <label for="editPriority" class="block text-sm font-medium text-gray-700 mb-1">
            Priority
          </label>
          <select
            id="editPriority"
            name="priority"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>
        </div>

        <div class="flex gap-3">
          <button
            type="submit"
            class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
          >
            Update
          </button>
          <button
            type="button"
            data-hide-edit-modal
            class="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>

  <div id="message" class="fixed top-4 right-4 p-4 rounded-md hidden z-50"></div>

  <script>
    const token = localStorage.getItem('authToken');
    if (!token) {
      window.location.href = '/login';
    }

    let watchlistData = [];

    async function fetchWatchlist() {
      try {
        const response = await fetch('http://localhost:3000/api/watchlist?includeDetails=true', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (response.ok) {
          watchlistData = await response.json();
          renderWatchlist();
        } else if (response.status === 401) {
          localStorage.removeItem('authToken');
          window.location.href = '/login';
        } else {
          showMessage('Failed to fetch watchlist', 'error');
        }
      } catch (error) {
        showMessage('Network error', 'error');
      }
    }

    function renderWatchlist() {
      const container = document.getElementById('watchlist');
      const emptyState = document.getElementById('emptyState');

      if (watchlistData.length === 0) {
        container.innerHTML = '';
        emptyState.classList.remove('hidden');
        return;
      }

      emptyState.classList.add('hidden');
      container.innerHTML = watchlistData.map(item => `
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="flex justify-between items-start mb-4">
            <div class="flex-1">
              <h3 class="text-lg font-semibold">${item.title || `Movie ${item.movieId}`}</h3>
              <p class="text-sm text-gray-600">ID: ${item.movieId}</p>
              ${item.year ? `<p class="text-sm text-gray-500">Year: ${item.year}</p>` : ''}
            </div>
            <div class="flex gap-2">
              <button data-show-edit-modal
                      data-movie-id="${item.movieId}"
                      data-notes="${encodeURIComponent(item.notes || '')}"
                      data-priority="${item.priority || 'medium'}"
                      class="text-blue-600 hover:text-blue-800">
                ‚úèÔ∏è
              </button>
              <button data-remove-from-watchlist
                      data-movie-id="${item.movieId}"
                      class="text-red-600 hover:text-red-800">
                üóëÔ∏è
              </button>
            </div>
          </div>

          ${item.notes ? `
            <div class="mb-3">
              <p class="text-sm text-gray-700">${item.notes}</p>
            </div>
          ` : ''}

          <div class="flex justify-between items-center">
            <span class="inline-block px-2 py-1 text-xs rounded-full ${getPriorityColor(item.priority)}">
              ${item.priority || 'medium'} priority
            </span>
            <span class="text-xs text-gray-500">
              Added ${new Date(item.createdAt).toLocaleDateString()}
            </span>
          </div>
        </div>
      `).join('');
    }

    function getPriorityColor(priority) {
      switch (priority) {
        case 'high': return 'bg-red-100 text-red-800';
        case 'medium': return 'bg-yellow-100 text-yellow-800';
        case 'low': return 'bg-green-100 text-green-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    function showAddMovieModal() {
      document.getElementById('addMovieModal').classList.remove('hidden');
    }

    function hideAddMovieModal() {
      document.getElementById('addMovieModal').classList.add('hidden');
      document.getElementById('addMovieForm').reset();
    }

    function showEditModal(movieId, notes, priority) {
      document.getElementById('editMovieId').value = movieId;
      document.getElementById('editNotes').value = notes || '';
      document.getElementById('editPriority').value = priority || 'medium';
      document.getElementById('editModal').classList.remove('hidden');
    }

    function hideEditModal() {
      document.getElementById('editModal').classList.add('hidden');
    }

    async function removeFromWatchlist(movieId) {
      if (!confirm('Are you sure you want to remove this movie from your watchlist?')) return;

      try {
        const response = await fetch(`http://localhost:3000/api/watchlist?movieId=${movieId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (response.ok) {
          showMessage('Movie removed from watchlist', 'success');
          await fetchWatchlist();
        } else {
          showMessage('Failed to remove movie', 'error');
        }
      } catch (error) {
        showMessage('Network error', 'error');
      }
    }

    function showMessage(text, type) {
      const messageDiv = document.getElementById('message');
      messageDiv.textContent = text;
      messageDiv.className = `fixed top-4 right-4 p-4 rounded-md z-50 ${type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`;
      messageDiv.classList.remove('hidden');

      setTimeout(() => {
        messageDiv.classList.add('hidden');
      }, 3000);
    }

    document.getElementById('addMovieBtn').addEventListener('click', showAddMovieModal);

    document.getElementById('addMovieForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);

      try {
        const response = await fetch('http://localhost:3000/api/watchlist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            movieId: formData.get('movieId'),
            notes: formData.get('notes'),
            priority: formData.get('priority')
          })
        });

        if (response.ok) {
          showMessage('Movie added to watchlist', 'success');
          hideAddMovieModal();
          await fetchWatchlist();
        } else {
          const result = await response.json();
          showMessage(result.message || 'Failed to add movie', 'error');
        }
      } catch (error) {
        showMessage('Network error', 'error');
      }
    });

    document.getElementById('editForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);

      try {
        const response = await fetch('http://localhost:3000/api/watchlist', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            movieId: formData.get('movieId'),
            notes: formData.get('notes'),
            priority: formData.get('priority')
          })
        });

        if (response.ok) {
          showMessage('Watchlist updated', 'success');
          hideEditModal();
          await fetchWatchlist();
        } else {
          showMessage('Failed to update watchlist', 'error');
        }
      } catch (error) {
        showMessage('Network error', 'error');
      }
    });

    // Add event delegation for data attributes
    document.addEventListener('click', (e) => {
      // Show add movie modal
      if (e.target.matches('[data-show-add-movie-modal]')) {
        showAddMovieModal();
      }

      // Hide add movie modal
      if (e.target.matches('[data-hide-add-movie-modal]')) {
        hideAddMovieModal();
      }

      // Show edit modal
      if (e.target.matches('[data-show-edit-modal]')) {
        const movieId = e.target.dataset.movieId;
        const notes = decodeURIComponent(e.target.dataset.notes || '');
        const priority = e.target.dataset.priority || 'medium';
        showEditModal(movieId, notes, priority);
      }

      // Hide edit modal
      if (e.target.matches('[data-hide-edit-modal]')) {
        hideEditModal();
      }

      // Remove from watchlist
      if (e.target.matches('[data-remove-from-watchlist]')) {
        const movieId = e.target.dataset.movieId;
        removeFromWatchlist(movieId);
      }
    });

    fetchWatchlist();
  </script>
</Layout>