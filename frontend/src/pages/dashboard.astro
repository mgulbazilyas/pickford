---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Pickford - Dashboard">
  <!-- Dashboard Header -->
  <header class="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h1 class="text-4xl md:text-5xl font-bold mb-4">🎬 Dashboard</h1>
        <p class="text-xl opacity-90">Explore movies, TV shows, and manage your watchlist</p>
      </div>
    </div>
  </header>

  <!-- Quick Stats -->
  <section class="py-8 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div class="bg-white rounded-lg shadow p-6 text-center">
          <div class="text-3xl font-bold text-blue-600 mb-2">🔥</div>
          <h3 class="text-lg font-semibold mb-1">Trending</h3>
          <p class="text-gray-600">Popular content</p>
        </div>
        <div class="bg-white rounded-lg shadow p-6 text-center">
          <div class="text-3xl font-bold text-green-600 mb-2">🎬</div>
          <h3 class="text-lg font-semibold mb-1">Movies</h3>
          <p class="text-gray-600">Browse films</p>
        </div>
        <div class="bg-white rounded-lg shadow p-6 text-center">
          <div class="text-3xl font-bold text-purple-600 mb-2">📺</div>
          <h3 class="text-lg font-semibold mb-1">TV Shows</h3>
          <p class="text-gray-600">Watch series</p>
        </div>
        <div class="bg-white rounded-lg shadow p-6 text-center">
          <div class="text-3xl font-bold text-red-600 mb-2">📋</div>
          <h3 class="text-lg font-semibold mb-1">Watchlist</h3>
          <p class="text-gray-600">Your list</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Dashboard Content -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Search Section -->
    <section class="mb-12">
      <div class="bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-2xl font-bold mb-6">🔍 Quick Search</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Search Movies</label>
            <div class="flex gap-2">
              <input
                type="text"
                id="movieSearch"
                placeholder="Enter movie title..."
                class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
              <button
                onclick="searchMovies()"
                class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                Search
              </button>
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Search TV Shows</label>
            <div class="flex gap-2">
              <input
                type="text"
                id="showSearch"
                placeholder="Enter show title..."
                class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              >
              <button
                onclick="searchShows()"
                class="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-colors"
              >
                Search
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Browse Categories -->
    <section class="mb-12">
      <h2 class="text-2xl font-bold mb-6">📂 Browse Categories</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Movies Categories -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-xl font-bold mb-4 text-blue-600">🎬 Movies</h3>
          <div class="space-y-3">
            <button onclick="loadCategory('movies', 'trending')" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              🔥 Trending Movies
            </button>
            <button onclick="loadCategory('movies', 'popular')" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              ⭐ Popular Movies
            </button>
            <button onclick="loadCategory('movies', 'anticipated')" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              🎯 Anticipated Movies
            </button>
            <button onclick="loadCategory('movies', 'boxoffice')" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              💰 Box Office Movies
            </button>
          </div>
        </div>

        <!-- TV Shows Categories -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-xl font-bold mb-4 text-purple-600">📺 TV Shows</h3>
          <div class="space-y-3">
            <button onclick="loadCategory('shows', 'trending')" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              🔥 Trending Shows
            </button>
            <button onclick="loadCategory('shows', 'popular')" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              ⭐ Popular Shows
            </button>
            <button onclick="loadCategory('shows', 'anticipated')" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              🎯 Anticipated Shows
            </button>
          </div>
        </div>

        <!-- Seasons & Episodes -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-xl font-bold mb-4 text-green-600">🎭 Seasons & Episodes</h3>
          <div class="space-y-3">
            <button onclick="loadPremieres()" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              🎉 Season Premieres
            </button>
            <button onclick="loadCalendar()" class="w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              📅 Upcoming Releases
            </button>
            <a href="/movies" class="block w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              🎬 All Movies
            </a>
            <a href="/watchlist" class="block w-full text-left px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
              📋 My Watchlist
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Results Section -->
    <section id="resultsSection" class="hidden">
      <div class="bg-white rounded-lg shadow-lg p-6">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold">📊 Results</h2>
          <button onclick="clearResults()" class="text-gray-500 hover:text-gray-700">
            ✕ Clear
          </button>
        </div>
        <div id="loadingSpinner" class="hidden text-center py-8">
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
          <p class="text-gray-600">Loading...</p>
        </div>
        <div id="resultsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          <!-- Results will be populated here -->
        </div>
        <div id="noResults" class="hidden text-center py-8">
          <p class="text-gray-500">No results found</p>
        </div>
      </div>
    </section>
  </div>

  <!-- Loading State -->
  <div id="loadingState" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-6 max-w-sm mx-4">
      <div class="text-center">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
        <p class="text-gray-700">Loading content...</p>
      </div>
    </div>
  </div>

  <!-- Error Message -->
  <div id="errorMessage" class="fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg hidden z-50">
    <div class="flex items-center justify-between">
      <span id="errorText"></span>
      <button onclick="hideError()" class="ml-4 text-white hover:text-gray-200">✕</button>
    </div>
  </div>

  <!-- Success Message -->
  <div id="successMessage" class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg hidden z-50">
    <div class="flex items-center justify-between">
      <span id="successText"></span>
      <button onclick="hideSuccess()" class="ml-4 text-white hover:text-gray-200">✕</button>
    </div>
  </div>

  <script>
    const API_BASE = import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:3000/api';
    let currentResults = [];
    let authToken = localStorage.getItem('authToken');

    // Initialize dashboard when page loads
    document.addEventListener('DOMContentLoaded', async () => {
      // Load trending content by default
      await loadTrendingContent();
      // Load user watchlist if logged in
      if (authToken) {
        await loadUserWatchlist();
      }
    });

    function showLoading() {
      document.getElementById('loadingState').classList.remove('hidden');
    }

    function hideLoading() {
      document.getElementById('loadingState').classList.add('hidden');
    }

    function showError(message) {
      const errorDiv = document.getElementById('errorMessage');
      const errorText = document.getElementById('errorText');
      errorText.textContent = message;
      errorDiv.classList.remove('hidden');
      setTimeout(hideError, 5000);
    }

    function hideError() {
      document.getElementById('errorMessage').classList.add('hidden');
    }

    function showSuccess(message) {
      const successDiv = document.getElementById('successMessage');
      const successText = document.getElementById('successText');
      successText.textContent = message;
      successDiv.classList.remove('hidden');
      setTimeout(hideSuccess, 3000);
    }

    function hideSuccess() {
      document.getElementById('successMessage').classList.add('hidden');
    }

    function showResults() {
      document.getElementById('resultsSection').classList.remove('hidden');
    }

    function hideResults() {
      document.getElementById('resultsSection').classList.add('hidden');
    }

    function clearResults() {
      currentResults = [];
      hideResults();
    }

    function displayResults(results, type = 'movie', sectionId = 'resultsGrid') {
      currentResults = results;
      const resultsGrid = document.getElementById(sectionId);
      const noResults = document.getElementById('noResults');

      if (!results || results.length === 0) {
        if (resultsGrid) {
          resultsGrid.innerHTML = '';
        }
        if (noResults) {
          noResults.classList.remove('hidden');
        }
        return;
      }

      if (noResults) {
        noResults.classList.add('hidden');
      }
      if (resultsGrid) {
        resultsGrid.innerHTML = results.slice(0, 12).map(item => createResultCard(item, type)).join('');
        showResults();
      }
    }

    function createResultCard(item, type) {
      const movie = type === 'show' ? (item.show || item) : (item.movie || item);
      const title = movie.title || movie.name || 'Untitled';
      const year = movie.year || 'N/A';
      const poster = movie.poster;
      const rating = movie.rating;
      const id = movie.ids?.trakt || item.ids?.trakt || movie.id;
      const overview = movie.overview || movie.plot || 'No description available.';

      return `
        <div class="bg-gray-50 rounded-lg overflow-hidden hover:shadow-lg transition-all duration-300 cursor-pointer transform hover:scale-105 group"
             data-navigate-to-movie
             data-movie-id="${id}">
          <div class="aspect-[2/3] bg-gray-200 relative">
            ${poster ?
              `<img src="${poster}" alt="${title}" class="w-full h-full object-cover" onerror="this.parentElement.innerHTML='<div class=\\'w-full h-full flex items-center justify-center text-gray-400 text-4xl\\'>${type === 'show' ? '📺' : '🎬'}</div>'">` :
              `<div class="w-full h-full flex items-center justify-center text-gray-400 text-4xl">
                ${type === 'show' ? '📺' : '🎬'}
              </div>`
            }
            ${rating ? `<div class="absolute top-2 right-2 bg-yellow-500 text-black px-2 py-1 rounded text-xs font-bold">⭐ ${rating}</div>` : ''}
            ${authToken ? `
              <button data-toggle-watchlist
                      data-movie-id="${id}"
                      data-movie-title="${title}"
                      data-movie-type="${type}"
                      class="absolute top-2 left-2 bg-red-600 text-white p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity group-hover:opacity-100">
                ❤️
              </button>
            ` : ''}
          </div>
          <div class="p-4">
            <h4 class="font-semibold text-sm mb-1 truncate" title="${title}">${title}</h4>
            <p class="text-xs text-gray-600 mb-2">${year}</p>
            <p class="text-xs text-gray-500 line-clamp-2">${overview}</p>
            ${authToken ? `
              <button data-toggle-watchlist
                      data-movie-id="${id}"
                      data-movie-title="${title}"
                      data-movie-type="${type}"
                      class="mt-2 w-full bg-blue-600 text-white text-xs py-1 rounded hover:bg-blue-700 transition-colors">
                Add to Watchlist
              </button>
            ` : ''}
          </div>
        </div>
      `;
    }

    async function loadTrendingContent() {
      showLoading();
      try {
        const [moviesResponse, showsResponse] = await Promise.all([
          fetch(`${API_BASE}/trakt-new/movies/trending?limit=6`),
          fetch(`${API_BASE}/trakt-new/shows/trending?limit=6`)
        ]);

        if (moviesResponse.ok && showsResponse.ok) {
          const movies = await moviesResponse.json();
          const shows = await showsResponse.json();

          // Update quick stats with actual counts
          document.querySelector('.text-blue-600').parentElement.querySelector('p').textContent = `${movies.length} trending`;
          document.querySelector('.text-green-600').parentElement.querySelector('p').textContent = `${movies.length} available`;
          document.querySelector('.text-purple-600').parentElement.querySelector('p').textContent = `${shows.length} available`;

          showSuccess('Loaded trending content');
        }
      } catch (error) {
        console.error('Error loading trending content:', error);
      } finally {
        hideLoading();
      }
    }

    async function loadUserWatchlist() {
      if (!authToken) return;

      try {
        const response = await fetch(`${API_BASE}/watchlist`, {
          headers: {
            'Authorization': `Bearer ${authToken}`
          }
        });

        if (response.ok) {
          const watchlist = await response.json();
          // Update watchlist count in stats
          const watchlistCount = document.querySelector('.text-red-600').parentElement.querySelector('p');
          if (watchlistCount) {
            watchlistCount.textContent = `${watchlist.length} items`;
          }
        }
      } catch (error) {
        console.error('Error loading watchlist:', error);
      }
    }

    async function searchMovies() {
      const query = document.getElementById('movieSearch').value.trim();
      if (!query) {
        showError('Please enter a movie title');
        return;
      }

      showLoading();
      try {
        const response = await fetch(`${API_BASE}/trakt-new/search/movie?query=${encodeURIComponent(query)}&extended=full`);
        if (response.ok) {
          const data = await response.json();
          displayResults(data, 'movie');
          showSuccess(`Found ${data.length} movies for "${query}"`);
        } else {
          showError('Failed to search movies');
        }
      } catch (error) {
        showError('Network error while searching movies');
        console.error('Search error:', error);
      } finally {
        hideLoading();
      }
    }

    async function searchShows() {
      const query = document.getElementById('showSearch').value.trim();
      if (!query) {
        showError('Please enter a show title');
        return;
      }

      showLoading();
      try {
        const response = await fetch(`${API_BASE}/trakt-new/search/show?query=${encodeURIComponent(query)}&extended=full`);
        if (response.ok) {
          const data = await response.json();
          displayResults(data, 'show');
          showSuccess(`Found ${data.length} shows for "${query}"`);
        } else {
          showError('Failed to search shows');
        }
      } catch (error) {
        showError('Network error while searching shows');
        console.error('Search error:', error);
      } finally {
        hideLoading();
      }
    }

    async function loadCategory(type, category) {
      showLoading();
      try {
        const response = await fetch(`${API_BASE}/trakt-new/${type}s/${category}?extended=full&limit=12`);
        if (response.ok) {
          const data = await response.json();
          displayResults(data, type);
          showSuccess(`Loaded ${data.length} ${category} ${type}s`);
        } else {
          showError(`Failed to load ${category} ${type}s`);
        }
      } catch (error) {
        showError(`Network error while loading ${category} ${type}s`);
        console.error('Category load error:', error);
      } finally {
        hideLoading();
      }
    }

    async function loadPremieres() {
      showLoading();
      try {
        const today = new Date().toISOString().split('T')[0];
        const response = await fetch(`${API_BASE}/trakt-new/calendars/shows/premieres/${today}/14?extended=full&limit=12`);
        if (response.ok) {
          const data = await response.json();
          displayResults(data, 'show');
          showSuccess(`Loaded ${data.length} season premieres`);
        } else {
          showError('Failed to load premieres');
        }
      } catch (error) {
        showError('Network error while loading premieres');
        console.error('Premieres load error:', error);
      } finally {
        hideLoading();
      }
    }

    async function loadCalendar() {
      showLoading();
      try {
        const today = new Date().toISOString().split('T')[0];
        const response = await fetch(`${API_BASE}/trakt-new/calendars/all/movies/${today}/14?extended=full&limit=12`);
        if (response.ok) {
          const data = await response.json();
          displayResults(data, 'movie');
          showSuccess(`Loaded ${data.length} upcoming releases`);
        } else {
          showError('Failed to load calendar');
        }
      } catch (error) {
        showError('Network error while loading calendar');
        console.error('Calendar load error:', error);
      } finally {
        hideLoading();
      }
    }

    function showDetails(id, type, movieData) {
      try {
        const movie = JSON.parse(decodeURIComponent(movieData));
        showModal(movie, type);
      } catch (error) {
        // Fallback: fetch details from API
        fetchDetails(id, type);
      }
    }

    async function fetchDetails(id, type) {
      showLoading();
      try {
        const response = await fetch(`${API_BASE}/trakt-new/${type}s/${id}?extended=full`);
        if (response.ok) {
          const data = await response.json();
          showModal(data, type);
        } else {
          showError('Failed to load details');
        }
      } catch (error) {
        showError('Network error while loading details');
      } finally {
        hideLoading();
      }
    }

    function showModal(movie, type) {
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4';
      modal.onclick = (e) => {
        if (e.target === modal) modal.remove();
      };

      const title = movie.title || movie.name || 'Untitled';
      const year = movie.year || 'N/A';
      const poster = movie.poster;
      const overview = movie.overview || movie.plot || movie.tagline || 'No description available.';
      const rating = movie.rating;
      const runtime = movie.runtime;
      const genres = movie.genres || [];
      const id = movie.ids?.trakt || movie.id;

      modal.innerHTML = `
        <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto" onclick="event.stopPropagation()">
          <div class="relative">
            ${poster ?
              `<img src="${poster}" alt="${title}" class="w-full h-64 object-cover">` :
              `<div class="w-full h-64 bg-gray-200 flex items-center justify-center text-gray-400 text-6xl">
                ${type === 'show' ? '📺' : '🎬'}
              </div>`
            }
            <button onclick="this.closest('.fixed').remove()" class="absolute top-2 right-2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-75">
              ✕
            </button>
          </div>
          <div class="p-6">
            <div class="flex items-center gap-4 mb-4">
              <h2 class="text-2xl font-bold">${title}</h2>
              <span class="text-gray-600">(${year})</span>
              ${rating ? `<span class="bg-yellow-500 text-black px-3 py-1 rounded-full text-sm font-bold">⭐ ${rating}</span>` : ''}
            </div>

            <div class="flex gap-4 text-sm text-gray-600 mb-4">
              ${runtime ? `<span>⏱️ ${runtime} min</span>` : ''}
              ${genres.length > 0 ? `<span>🎭 ${genres.slice(0, 3).join(', ')}</span>` : ''}
            </div>

            <div class="mb-6">
              <h3 class="font-semibold mb-2">Overview</h3>
              <p class="text-gray-700 leading-relaxed">${overview}</p>
            </div>

            <div class="flex gap-3">
              ${authToken ? `
                <button onclick="toggleWatchlist('${id}', '${title}', '${type}'); this.closest('.fixed').remove();"
                        class="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition-colors">
                  ❤️ Add to Watchlist
                </button>
              ` : `
                <a href="/login" class="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition-colors">
                  Login to Add
                </a>
              `}

              <button onclick="this.closest('.fixed').remove()"
                      class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors">
                Close
              </button>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    async function toggleWatchlist(id, title, type) {
      if (!authToken) {
        showError('Please login to add to watchlist');
        return;
      }

      try {
        const response = await fetch(`${API_BASE}/watchlist`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`
          },
          body: JSON.stringify({
            movieId: id,
            notes: `Added from dashboard: ${title}`,
            priority: 'medium'
          })
        });

        if (response.ok) {
          showSuccess(`${title} added to watchlist`);
          // Refresh watchlist count
          await loadUserWatchlist();
        } else {
          const error = await response.json();
          showError(error.message || 'Failed to add to watchlist');
        }
      } catch (error) {
        showError('Network error while adding to watchlist');
        console.error('Watchlist error:', error);
      }
    }

    // Handle Enter key in search inputs
    document.getElementById('movieSearch')?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') searchMovies();
    });

    document.getElementById('showSearch')?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') searchShows();
    });

    // Handle escape key to close modals
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const modal = document.querySelector('.fixed.inset-0');
        if (modal) modal.remove();
      }
    });

    // Event delegation for data attributes
    document.addEventListener('click', (e) => {
      // Navigate to movie details
      if (e.target.closest('[data-navigate-to-movie]')) {
        const movieCard = e.target.closest('[data-navigate-to-movie]');
        const movieId = movieCard.dataset.movieId;
        window.location.href = `/movie/${movieId}`;
      }

      // Toggle watchlist
      if (e.target.matches('[data-toggle-watchlist]')) {
        e.stopPropagation();
        const movieId = e.target.dataset.movieId;
        const movieTitle = e.target.dataset.movieTitle;
        const movieType = e.target.dataset.movieType;
        toggleWatchlist(movieId, movieTitle, movieType);
      }
    });
  </script>

  <style>
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .group:hover .group-hover\:opacity-100 {
      opacity: 1;
    }

    .opacity-0 {
      opacity: 0;
    }

    .transition-opacity {
      transition-property: opacity;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      transition-duration: 150ms;
    }
  </style>
</Layout>